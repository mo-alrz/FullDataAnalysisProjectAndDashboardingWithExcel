Most used VBA Procedure is the Sub Procedure, This consists of a set of commands the code should execute

Sub my_macro()

End sub

Function Procedures are commands that create formulas, They return one value (or an array of values), They can be used
as “normal” formulas in Excel or inside other procedures

Function my_formula()

End function

CTRL + space -> Complete the word

VBA assigns color to keywords and capitalizes code references
Wrong use of code is shown as red
Comments (' at the beginning) are shown as green

Excel object's model: Application -> Workbooks -> (Workbook) -> Worksheets -> (Worksheet) -> Range

Property -> What an object has
Properties comes after the object hierarchy

Method -> What an object does
Methods can have additional information
Methods can change properties
Methods can have argument

Different Methods to Write to Cells
                                                        A      B       C       D       E       F
Range("A1").Value = "1st"                           1   "1st"
Range("A2:B2").Value = "2nd"                        2   "2nd"  "2nd"
Range("A3:C3, E3:F3").Value = "3rd"                 3   "3rd"  "3rd"   "3rd"           "3rd"   "3rd"
Range("A4,C4").Value = "4th"                        4   "4th"          "4th"
Range("A5", "C5").Value = "5th"                     5   "5th"  "5th"   "5th"
Range("A" & 6, "C" & 6).Value = "6th"               6   "6th"  "6th"   "6th"
Range("A4:C7").Cells(4, 2).Value = "7th"            7          "7th"
Range("A1").Offset(7, 2) = "8th"                    8                  "8th"
Range("A1:B1").Offset(8, 1) = "9th"                 9          "9th"   "9th"
Range("LastOne").Value = "10th"                    10   "10th"

Referencing Entire Rows / Columns


Rows("12:14").RowHeight = 30                            Rows 12, 13 & 14 have a row height of 30
Range("16:16,18:18,20:20").RowHeight = 30               Rows 16, 18 & 20 are changed. 17 & 19 are not touched.
Columns("E:F").ColumnWidth=10                           Columns E to F have a column width of 10
Range("H:H,J:J").ColumnWidth=10                         Columns H & J are changed. Column I is not touched.
Range(Columns(1), Columns(3)).ColumnWidth = 5           Columns A, B & C have column width of 5
Cells.Columns.AutoFit                                   All columns are adjusted by autofit

Methods to find the last Row/Column
Last row
Range("k6").Value = Cells(Rows.Count, 1).End(xlUp).Row
Range("k6").Value = Range("A4").End(xlDown).Row
Range("k11").Value = Cells.SpecialCells(xlCellTypeLastCell).Row
Range("k12").Value = ActiveSheet.UsedRange.Rows.Count

Last Column
Range("k8").Value = Cells(4, Columns.Count).End(xlToLeft).Column

Current Region Address
Range("k9").Value = Range("A5").CurrentRegion.Address

Current Region Rows Number
Range("k10").Value = Range("A5").CurrentRegion.Rows.Count

Variables And Data Types
Data Type                Memory used                         Range
Byte                     1 byte                              0 to 255
Integer                  2 bytes                       -32,768 to 32,768
Long                     4 bytes                -2,147,483,648 to 2,147,483,647
Boolean                  2 bytes                          True / False
Double                   8 bytes                Very large negative to positive
                                            range with high precision (also used for %)
String                   1 byte per char                Depends on length
Object                   4 bytes                            Any object
Date                     8 bytes                     01,1,0100 to 12,31,9999
Currency                 8 bytes                Very large negative to positive
                                                 range up to 4 decimal places
Variant                  16 bytes           Any value –can also hold values such as
                                                 “Empty”, “Nothing” and “Null”

Declaring Variables, Arrays and Constants
Declaring variables by defining a suitable data type has the outcome:
1. Your code will run faster 2. Your code will be less prone to mistakes

Dim my Text As String
Dim LastRow As Long, FirstRow as Long

A group of similar variables that has one name can be declared as an Array

Dim myMonth(1 To 12) As String

If you need to refer to a value that never changes, you can use Constants

Const myScenario As String = "Actual"
Const ProfitCen As Long = 9999

Variables can also hold objects. Common objects are:

1. Workbook Object          Dim NewBook As Workbook
2. Worksheet Object         Dim NewSheet As Worksheet
3. Range Object             Dim NewRange As Range

To assign variables to objects, you need to use the SET statement

Set NewBook = Workbooks.Add

All "usual" VBA assignments are actually done with the LET statement. However, this is an optional keyword. That's why
it's usually not used. In case you come across it, you know what it does.

LastRow = Rows.Count - is the same as Let LastRow = Rows.Count

With…End With for Easier coding
- Faster code writing
- Easier code maintenance
- Faster code execution
- The fewer dots you have, the faster your code will run.

Before
Set myRange = Range("A10", "A" & Cells(Rows.Count, 1).End(xlUp).Row)
myRange.Font.Name = “Arial”
myRange.Font.Size = 12
myRange.Font.Bold = True

After
Set myRange = Range("A10", "A" & Cells(Rows.Count, 1).End(xlUp).Row)
With myRange.Font
    .Name = “Arial”
    .Size = 12
    .Bold = True
End with

For…Each to Loop Through Collections
- Execute code for all Worksheets in a Workbook
- Follow instructions for all Cells inside a Range
- Run code for each Comment inside the Worksheet Comments collection

Dim Sh As Worksheet
    For Each Sh In ThisWorkbook.Worksheets
    Sh.Protect "test“
Next Sh

Dim cell As Range
    For Each cell In ActiveSheet.UsedRange
    ‘[Instructions – you can use IF here to check whether a condition ‘
    is met – also to exclude parts of the collection]
Next cell

IF…Then Statements for Conditional Outcomes
- Similar to Excel formulas, you can use IF…Then in VBA
- You can handle as many conditions as you see fit
- You can also use AND, OR statements

One line
If Range("B3").Value <> "" Then Range("C3").Value = Range("B3").Value

More line
If Range("B3").Value <> "" Then
    Range("C3").Value = Range("B3").Value
End If

Dim Sh As Worksheet
    For Each Sh In ThisWorkbook.Worksheets
        If Sh.Name = "Purpose" Then
            'don't allow formatting etc...
            Sh.Protect " test"
        ElseIf Sh.CodeName = "shWith" Then
            'protect without password
            Sh.Protect
        Else
            'allow formatting for all other sheets
            Sh.Protect "test",,,,, True, True, True
        End If
    Next Sh

Select Case, as Alternative for Many IFs
- You have a better overview
- Easier code maintenance
- Faster code execution. VBA leaves the Select Case construct the moment it arrives at a TRUE. Place the likely cases
  at the top Of the code.

Select Case Range("B3").Value
    Case 1 To 200
        Range("C3").Value = "Good"
    Case 0
        Range("C3").Value = ""
    Case Is > 200
        Range("C3").Value = "Excellent"
    Case Else
        Range("C3").Value = "Bad"
End Select

To select different specific values, you can also write:
Case 1,3,7

Goto Statement to Change Program Flow
- Mainly for error handling
- Execute a different part of code depending on a condition to use goto
- Type the name of the label with colon (or number without colon)
- You might need to Exit sub before the label if you have a message box or another VBA statement

Sub Simple_GoTo()
    Range("D3").Value = ""
    If lsError(Range("B3")) Then GoTo GetOut
    Range("C3").Value = Range("B3").Value
Exit Sub
GetOut:
    Range("D3").Value = "You have an error in the cell"
End Sub

MSG box Function
MsgBox "Hello " & Excel.Application.UserName, , "Welcome!"

Dim Answer As VbMsgBoxResult
Answer = MsgBox("Are you sure about this?" vbYesNo + vbQuestion + vbDefaultButton2, "Clear cells")
    If Answer = vbYes Then
        Range("A7:B9").Clear
    Else
        Exit Sub
    End If

VBA’s InputBox Function
Dim mylnp As String
mylnp = VBA.lnputBox("Please input subtitle", "Subtitle please...")
    If mylnp = "" Then
    Exit sub
Range("A2").Value Excel.WorksheetFunction.Proper(mylnp)

